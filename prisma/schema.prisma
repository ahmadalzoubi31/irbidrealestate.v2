generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // url       = env("POSTGRES_PRISMA_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")
  // url       = env("DATABASE_URL")
  // directUrl = env("DATABASE_URL_UNPOOLED")
  // url      = env("MONGODB_DEV_URI")
  url      = env("MONGODB_PROD_URI")
}

// *** user ***
model user {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  fullName  String
  username  String   @unique
  password  String
  role      String
  status    Boolean  @default(true)
  createdBy String   @default("-")
  createdAt DateTime @default(now())
  updatedBy String?  @default("-")
  updatedAt DateTime @updatedAt
}

// *** building ***
model building {
  id                        String         @id @default(auto()) @map("_id") @db.ObjectId
  name                      String         @unique
  apartmentsCount           Int            @default(0)
  storeCount                Int            @default(0)
  basinName                 String
  basinNumber               String
  landNumber                String
  electricBill              String?        @default("-")
  waterBill                 String?        @default("-")
  serviceAmount             Float          @default(0.0)
  servicePaidBy             String         @default("المالك")
  serviceTerm               String         @default("شهري")
  maintenanceAmount         Float          @default(0.0)
  maintenancePaidBy         String         @default("المالك")
  maintenanceTerm           String         @default("شهري")
  realLocation              String?
  registeredApartmentsCount Int            @default(0)
  apartments                apartment[]
  flats                     flat[]
  buildingFlat              buildingFlat[]
  status                    Boolean        @default(true)
  createdBy                 String         @default("-")
  createdAt                 DateTime       @default(now())
  updatedBy                 String?        @default("-")
  updatedAt                 DateTime       @updatedAt
}

model buildingFlat {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  flatNumber      String
  ownerName       String
  ownerNumber     String?  @default("###")
  electricSub     String?
  electricCounter String?
  waterSub        String?
  waterCounter    String?
  renterName      String
  renterNumber    String?  @default("###")
  flatStatus      Int      @default(0)
  status          Boolean  @default(true)
  createdBy       String   @default("-")
  createdAt       DateTime @default(now())
  updatedBy       String?  @default("-")
  updatedAt       DateTime @updatedAt
  building        building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  buildingId      String   @db.ObjectId
}

// model BuildingStore {
//   id              Int      @id @default(autoincrement())
//   flatNumber      String
//   ownerName       String
//   ownerNumber     String?  @default("###")
//   electricSub     String?
//   electricCounter String?
//   waterSub        String?
//   waterCounter    String?
//   renterName      String
//   renterNumber    String?  @default("###")
//   status          Boolean  @default(true)
//   createdBy       String   @default("-")
//   createdAt       DateTime @default(now())
//   updatedBy       String?  @default("-")
//   updatedAt       DateTime @updatedAt
//   building        building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
//   buildingId      Int
// }

// *** Apartment ***
model apartment {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  apartmentNumber   String
  code              String?
  ownerName         String
  ownerNumber       String?
  agentName         String
  agentNumber       String?
  realLocation      String?
  electricSub       String?
  waterSub          String?
  rentDuration      String
  rentAmount        Float                 @default(0.0)
  rentDate          DateTime              @default(now())
  rentPaymentWay    String?
  isFurniture       String                @default("لا")
  /**
   * 0 ==> "منتهي"
   * 1 ==> "مفسوخ"
   * 2 ==> "مجدد"
   * 3 ==> "قائم"
   */
  rentStatus        Int                   @default(3)
  renterInfo        apartmentRenterInfo[]
  isServiceIncluded String                @default("لا")
  insurance         Float                 @default(0)
  insuranceWithWho  String                @default("غير محدد")
  insuranceType     String                @default("عادي")
  commissionAmount  Float                 @default(0)
  clearanceImage    String?
  status            Boolean               @default(true)
  createdBy         String                @default("-")
  createdAt         DateTime              @default(now())
  updatedBy         String?               @default("-")
  updatedAt         DateTime              @updatedAt
  payments          payment[]
  building          building?             @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  buildingId        String?               @db.ObjectId
}

model apartmentRenterInfo {
  id                     String     @id @default(auto()) @map("_id") @db.ObjectId
  renterName             String
  renterNumber           String     @default("###")
  renterAdditionalNumber String?
  renterNationality      String?
  renterCountry          String?
  renterIdentification   String?
  identificationImage    String?
  contractImage          String?
  apartment              apartment? @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  apartmentId            String?    @db.ObjectId
}

// *** Payments ***
model payment {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  nextRentDate        DateTime
  receivedPaymentDate DateTime
  depositAmount       Float
  depositDate         DateTime
  notes               String?
  images              String?
  status              Boolean   @default(true)
  createdBy           String    @default("-")
  createdAt           DateTime  @default(now())
  updatedBy           String?   @default("-")
  updatedAt           DateTime  @updatedAt
  apartment           apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  apartmentId         String    @db.ObjectId
}

// *** Ads ***
model ad {
  id                    String             @id @default(auto()) @map("_id") @db.ObjectId
  code                  String             @unique
  propertyStatus        String
  propertyType          Int
  propertyOwnerName     String
  propertyOwnerNumber   String             @default("###")
  propertyOwnerIdentity String
  propertyAgentName     String?
  propertyAgentNumber   String             @default("###")
  propertyAgentIdentity String
  facebookLink          String?
  instagramLink         String?
  propertyLink          String?
  governorate           String
  directorate           String
  village               String
  basin                 String
  plot                  String
  apartmentNumber       String?
  classification        String?
  neighborhood          String?
  expectedRentAmount    String?
  area                  String?
  price                 String?
  isFurnished           String             @default("غير مفروش")
  realLocation          String?
  nearbyLandmarks       String?
  buildingName          String?
  floor                 String?
  internalArea          String?
  externalArea          String?
  floorsCount           String?
  floorsArea            String?
  buildingAge           String?
  notes                 String?
  storesCount           String?
  storesArea            String?
  isRegistered          String?            @default("فارغ")
  interestedPeople      interestedPeople[]
  images                String?
  status                Boolean            @default(true)
  createdBy             String             @default("-")
  createdAt             DateTime           @default(now())
  updatedBy             String?            @default("-")
  updatedAt             DateTime           @updatedAt
}

// *** InterestedPeople ***
model interestedPeople {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  number String @default("###")
  ad     ad     @relation(fields: [adId], references: [id])
  adId   String @db.ObjectId
}

// *** Orders ***
model order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        Int
  date        DateTime
  ownerName   String
  ownerNumber String
  details     String
  price       Float    @default(0.0)
  firstStep   String?
  notes       String?
  status      Boolean  @default(true)
  createdBy   String   @default("-")
  createdAt   DateTime @default(now())
  updatedBy   String?  @default("-")
  updatedAt   DateTime @updatedAt
}

// *** Claims ***
model claim {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  apartmentName    String
  claimNumber      String
  claimDate        DateTime          @default(now())
  claimFrom        String
  claimCollections claimCollection[]
  claimDetails     claimDetail[]
  clearanceNotes   String?
  total            Float             @default(0.0)
  profit           Float             @default(0.0)
  /**
   * 1 ==> "نشط"
   * 2 ==> "جاهزه للتحصيل"
   * 3 ==> "تمت المخالصة"
   */
  claimStatus      Int               @default(1)
  status           Boolean           @default(true)
  createdBy        String            @default("-")
  createdAt        DateTime          @default(now())
  updatedBy        String?           @default("-")
  updatedAt        DateTime          @updatedAt
}

model claimCollection {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  dateTime DateTime @default(now())
  payment  Float    @default(0.0)
  notes    String?
  claimId  String   @db.ObjectId
  claim    claim    @relation(fields: [claimId], references: [id], onDelete: Cascade)
}

model claimDetail {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  item         String
  price        Float    @default(0.0)
  specialPrice Float    @default(0.0)
  dateTime     DateTime @default(now())
  image        String?  @default("")
  claim        claim    @relation(fields: [claimId], references: [id], onDelete: Cascade)
  claimId      String   @db.ObjectId
}

// model AppFile {
//   id          Int           @id @default(autoincrement())
//   name        String
//   path        String
//   type        String
//   size        String
//   key         String        @unique
//   fileCount   Int
//   purpose     String
//   relatedId   Int
//   relatedType String
//   status      Boolean       @default(true)
//   createdBy   String        @default("-")
//   createdAt   DateTime      @default(now())
//   updatedBy   String?       @default("-")
//   updatedAt   DateTime      @updatedAt
//   FileContent FileContent[]
// }

// model FileContent {
//   id         Int      @id @default(autoincrement())
//   key        String
//   value      String
//   appFile    AppFile? @relation(fields: [appFileId], references: [id])
//   createdAt  DateTime
//   modifiedAt DateTime
//   appFileId  Int?
// }

model flat {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  counter      Int
  services     service[]
  maintenances maintenance[]
  building     building      @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  buildingId   String        @db.ObjectId
}

model service {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  isPaid Boolean @default(false)
  month  Int
  year   Int
  flat   flat?   @relation(fields: [flatId], references: [id], onDelete: Cascade)
  flatId String? @db.ObjectId
}

model maintenance {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  isPaid Boolean @default(false)
  month  Int
  year   Int
  flat   flat?   @relation(fields: [flatId], references: [id], onDelete: Cascade)
  flatId String? @db.ObjectId
}
