generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgres"
  // url       = env("POSTGRES_PRISMA_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

// *** User ***
model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  fullName  String
  username  String   @unique
  password  String
  role      String
  status    Boolean  @default(true)
  createdBy String   @default("-")
  createdAt DateTime @default(now())
  updatedBy String?  @default("-")
  updatedAt DateTime @updatedAt
}

// *** Building ***
model Building {
  id                        Int            @id @default(autoincrement())
  name                      String         @unique
  apartmentsCount           Int            @default(0)
  storeCount                Int            @default(0)
  basinName                 String
  basinNumber               String
  landNumber                String
  electricBill              String?        @default("-")
  waterBill                 String?        @default("-")
  serviceAmount             Float          @default(0.0)
  servicePaidBy             String         @default("المالك")
  serviceTerm               String         @default("شهري")
  maintenanceAmount         Float          @default(0.0)
  maintenancePaidBy         String         @default("المالك")
  maintenanceTerm           String         @default("شهري")
  realLocation              String?
  registeredApartmentsCount Int            @default(0)
  apartments                Apartment[]
  flats                     Flat[]
  buildingFlat              BuildingFlat[]
  status                    Boolean        @default(true)
  createdBy                 String         @default("-")
  createdAt                 DateTime       @default(now())
  updatedBy                 String?        @default("-")
  updatedAt                 DateTime       @updatedAt
}

model BuildingFlat {
  id              Int      @id @default(autoincrement())
  flatNumber      String
  ownerName       String
  ownerNumber     String?  @default("###")
  electricSub     String?
  electricCounter String?
  waterSub        String?
  waterCounter    String?
  renterName      String
  renterNumber    String?  @default("###")
  flatStatus      Int      @default(0)
  status          Boolean  @default(true)
  createdBy       String   @default("-")
  createdAt       DateTime @default(now())
  updatedBy       String?  @default("-")
  updatedAt       DateTime @updatedAt
  building        Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  buildingId      Int
}

// model BuildingStore {
//   id              Int      @id @default(autoincrement())
//   flatNumber      String
//   ownerName       String
//   ownerNumber     String?  @default("###")
//   electricSub     String?
//   electricCounter String?
//   waterSub        String?
//   waterCounter    String?
//   renterName      String
//   renterNumber    String?  @default("###")
//   status          Boolean  @default(true)
//   createdBy       String   @default("-")
//   createdAt       DateTime @default(now())
//   updatedBy       String?  @default("-")
//   updatedAt       DateTime @updatedAt
//   building        Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
//   buildingId      Int
// }

// *** Apartment ***
model Apartment {
  id                   Int       @id @default(autoincrement())
  apartmentNumber      String
  ownerName            String
  ownerNumber          String?
  agentName            String
  agentNumber          String?
  realLocation         String?
  electricSub          String?
  waterSub             String?
  renterName           String
  renterNumber         String    @default("###")
  rentDuration         String
  rentAmount           Float     @default(0.0)
  rentDate             DateTime  @default(now())
  rentPaymentWay       String?
  isFurniture          String    @default("لا")
  /**
   * 0 ==> "منتهي"
   * 1 ==> "مفسوخ"
   * 2 ==> "مجدد"
   * 3 ==> "قائم"
   */
  rentStatus           Int       @default(3)
  renterNationality    String?
  renterIdentification String?
  isServiceIncluded    String    @default("لا")
  insurance            Float     @default(0)
  commissionAmount     Float     @default(0)
  status               Boolean   @default(true)
  createdBy            String    @default("-")
  createdAt            DateTime  @default(now())
  updatedBy            String?   @default("-")
  updatedAt            DateTime  @updatedAt
  files                AppFile[]
  payments             Payment[]
  building             Building? @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  buildingId           Int?
}

// *** Payments ***
model Payment {
  id                  Int       @id @default(autoincrement())
  nextRentDate        DateTime
  receivedPaymentDate DateTime
  depositAmount       Float
  depositDate         DateTime
  notes               String?
  files               AppFile[]
  status              Boolean   @default(true)
  createdBy           String    @default("-")
  createdAt           DateTime  @default(now())
  updatedBy           String?   @default("-")
  updatedAt           DateTime  @updatedAt
  apartment           Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  apartmentId         Int
}

// *** Ads ***
model Ad {
  id                    Int                @id @default(autoincrement())
  code                  String             @unique
  propertyStatus        String
  propertyType          Int
  propertyOwnerName     String
  propertyOwnerNumber   String             @default("###")
  propertyOwnerIdentity String
  propertyAgentName     String?
  propertyAgentNumber   String             @default("###")
  propertyAgentIdentity String
  facebookLink          String?
  instagramLink         String?
  propertyLink          String?
  governorate           String
  directorate           String
  village               String
  basin                 String
  plot                  String
  apartmentNumber       String?
  classification        String?
  neighborhood          String?
  expectedRentAmount    String?
  notes                 String?
  interestedPeople      InterestedPeople[]
  files                 AppFile[]
  status                Boolean            @default(true)
  createdBy             String             @default("-")
  createdAt             DateTime           @default(now())
  updatedBy             String?            @default("-")
  updatedAt             DateTime           @updatedAt
}

// *** InterestedPeople ***
model InterestedPeople {
  id     Int    @id @default(autoincrement())
  name   String
  number String @default("###")
  ad     Ad     @relation(fields: [adId], references: [id])
  adId   Int
}

// *** Orders ***
model Order {
  id          Int      @id @default(autoincrement())
  type        Int
  date        DateTime
  ownerName   String
  ownerNumber String
  details     String
  price       Float    @default(0.0)
  firstStep   String?
  notes       String?
  status      Boolean  @default(true)
  createdBy   String   @default("-")
  createdAt   DateTime @default(now())
  updatedBy   String?  @default("-")
  updatedAt   DateTime @updatedAt
}

// *** Claims ***
model Claim {
  id               Int               @id @default(autoincrement())
  apartmentName    String
  claimNumber      String
  claimDate        DateTime          @default(now())
  claimFrom        String
  claimCollections ClaimCollection[]
  claimDetails     ClaimDetail[]
  clearanceNotes   String?
  total            Float             @default(0.0)
  /**
   * 1 ==> "نشط"
   * 2 ==> "جاهزه للتحصيل"
   * 3 ==> "تمت المخالصة"
   */
  claimStatus      Int               @default(1)
  status           Boolean           @default(true)
  createdBy        String            @default("-")
  createdAt        DateTime          @default(now())
  updatedBy        String?           @default("-")
  updatedAt        DateTime          @updatedAt
}

model ClaimCollection {
  id       Int      @id @default(autoincrement())
  dateTime DateTime @default(now())
  payment  Float    @default(0.0)
  notes    String?
  claimId  Int
  claim    Claim    @relation(fields: [claimId], references: [id], onDelete: Cascade)
}

model ClaimDetail {
  id       Int      @id @default(autoincrement())
  item     String
  price    Float    @default(0.0)
  dateTime DateTime @default(now())
  claim    Claim    @relation(fields: [claimId], references: [id], onDelete: Cascade)
  claimId  Int
}

model AppFile {
  id            Int         @id @default(autoincrement())
  name          String
  path          String
  type          String
  size          String
  key           String      @unique
  fileCount     Int
  purpose       String
  relatedId     Int
  relatedType   String
  status        Boolean     @default(true)
  createdBy     String      @default("-")
  createdAt     DateTime    @default(now())
  updatedBy     String?     @default("-")
  updatedAt     DateTime    @updatedAt
  apartment     Apartment?  @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  apartmentId   Int?
  payment       Payment?    @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId     Int?
  ad            Ad?         @relation(fields: [adId], references: [id], onDelete: Cascade)
  adId          Int?
  fileContent   FileContent @relation(fields: [fileContentId], references: [id], onDelete: Cascade)
  fileContentId Int         @unique
}

model FileContent {
  id         Int      @id @default(autoincrement())
  key        String
  value      String
  appFile    AppFile?
  createdAt  DateTime
  modifiedAt DateTime
}

model Flat {
  id           Int           @id @default(autoincrement())
  counter      Int
  services     Service[]
  maintenances Maintenance[]
  building     Building      @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  buildingId   Int
}

model Service {
  id     Int     @id @default(autoincrement())
  isPaid Boolean @default(false)
  month  Int
  year   Int
  flat   Flat?   @relation(fields: [flatId], references: [id], onDelete: Cascade)
  flatId Int?
}

model Maintenance {
  id     Int     @id @default(autoincrement())
  isPaid Boolean @default(false)
  month  Int
  year   Int
  flat   Flat?   @relation(fields: [flatId], references: [id], onDelete: Cascade)
  flatId Int?
}
