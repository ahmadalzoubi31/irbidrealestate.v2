// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider      = "prisma-client-js"
//   binaryTargets = ["native", "darwin-arm64"]
//   output        = "../node_modules/.prisma/client"
// }
generator client {
  provider                      = "prisma-client-js"
  interactiveTransactionTimeout = 20000 // Increase to 10 seconds
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_DEV_URI")
}

// *** User ***
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  username  String   @unique
  password  String
  role      String
  status    Boolean  @default(true)
  createdBy String   @default("-")
  createdAt DateTime @default(now())
  updatedBy String?  @default("-")
  updatedAt DateTime @updatedAt
}

// *** Building ***
model Building {
  id                        String      @id @default(auto()) @map("_id") @db.ObjectId
  name                      String      @unique
  apartmentsCount           Int         @default(0)
  storeCount                Int         @default(0)
  basinName                 String
  basinNumber               String
  landNumber                String
  electricBill              String?     @default("-")
  serviceAmount             Float       @default(0.0)
  maintenanceAmount         Float       @default(0.0)
  registeredApartmentsCount Int         @default(0)
  apartments                Apartment[]
  status                    Boolean     @default(true)
  createdBy                 String      @default("-")
  createdAt                 DateTime    @default(now())
  updatedBy                 String?     @default("-")
  updatedAt                 DateTime    @updatedAt
}

// *** Apartment ***
model Apartment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  apartmentNumber String
  ownerName       String
  ownerNumber     String?
  agentName       String
  agentNumber     String?
  realLocation    String?
  electricSub     String?
  waterSub        String?
  renterName      String
  renterNumber    String   @default("###")
  rentDuration    String
  rentAmount      Float    @default(0.0)
  rentDate        DateTime @default(now())
  rentPaymentWay  String?
  isFurniture     String   @default("لا")
  /**
   * 0 ==> "منتهي"
   * 1 ==> "مفسوخ"
   * 2 ==> "مجدد"
   * 3 ==> "قائم"
   */

  rentStatus           Int       @default(3)
  renterNationality    String?
  renterIdentification String?
  isServiceIncluded    String    @default("لا")
  insurance            Float     @default(0)
  commissionAmount     Float     @default(0)
  files                AppFile[]
  status               Boolean   @default(true)
  createdBy            String    @default("-")
  createdAt            DateTime  @default(now())
  updatedBy            String?   @default("-")
  updatedAt            DateTime  @updatedAt
  payments             Payment[]
  claims               Claim[]
  Building             Building? @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  buildingId           String?   @db.ObjectId
}

// *** Payments ***
model Payment {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  nextRentDate        DateTime
  receivedPaymentDate DateTime
  depositAmount       Float
  depositDate         DateTime
  notes               String?
  files               AppFile[]
  status              Boolean   @default(true)
  createdBy           String    @default("-")
  createdAt           DateTime  @default(now())
  updatedBy           String?   @default("-")
  updatedAt           DateTime  @updatedAt
  apartmentId         String    @db.ObjectId
  Apartment           Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
}

// *** Ads ***
model Ad {
  id                    String             @id @default(auto()) @map("_id") @db.ObjectId
  code                  String             @unique
  propertyStatus        String
  propertyType          Int
  propertyOwnerName     String
  propertyOwnerNumber   String             @default("###")
  propertyOwnerIdentity String
  propertyAgentName     String?
  propertyAgentNumber   String             @default("###")
  propertyAgentIdentity String
  facebookLink          String?
  instagramLink         String?
  propertyLink          String?
  governorate           String
  directorate           String
  village               String
  basin                 String
  plot                  String
  apartmentNumber       String?
  classification        String?
  neighborhood          String?
  expectedRentAmount    String?
  notes                 String?
  interestedPeople      InterestedPeople[]
  files                 AppFile[]
  status                Boolean            @default(true)
  createdBy             String             @default("-")
  createdAt             DateTime           @default(now())
  updatedBy             String?            @default("-")
  updatedAt             DateTime           @updatedAt
}

// *** InterestedPeople ***
model InterestedPeople {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  number String  @default("###")
  Ad     Ad?     @relation(fields: [adId], references: [id])
  adId   String? @db.ObjectId
}

// *** Orders ***
model Order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        Int
  date        DateTime
  ownerName   String
  ownerNumber String
  details     String
  price       Float    @default(0.0)
  firstStep   String?
  notes       String?
  status      Boolean  @default(true)
  createdBy   String   @default("-")
  createdAt   DateTime @default(now())
  updatedBy   String?  @default("-")
  updatedAt   DateTime @updatedAt
}

// *** Claims ***
model Claim {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  claimDate   DateTime     @default(now())
  claimFrom   String
  collections Collection[]
  details     Detail[]
  files       AppFile[]
  total       Float        @default(0.0)
  status      Boolean      @default(true)
  createdBy   String       @default("-")
  createdAt   DateTime     @default(now())
  updatedBy   String?      @default("-")
  updatedAt   DateTime     @updatedAt
  apartmentId String       @db.ObjectId
  Apartment   Apartment    @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
}

model Collection {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  dateTime DateTime @default(now())
  payment  Float    @default(0.0)
  notes    String?

  claimId String @db.ObjectId
  Claim   Claim  @relation(fields: [claimId], references: [id], onDelete: Cascade)
}

model Detail {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  item    String
  price   Float  @default(0.0)
  claimId String @db.ObjectId
  Claim   Claim  @relation(fields: [claimId], references: [id], onDelete: Cascade)
}

// model AdFile {
//   id        String @id @default(auto()) @map("_id") @db.ObjectId
//   name      String
//   status    Boolean  @default(true)
// createdBy                 String      @default("-")
//   createdAt DateTime @default(now())
// updatedBy     String? @default("-")
//   updatedAt DateTime @updatedAt
//   Ad        Ad       @relation(fields: [adId], references: [id], onDelete: Cascade)
//   adId      String @db.ObjectId
// }

model AppFile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  path        String
  type        String
  size        String
  key         String
  purpose     String
  relatedId   String
  relatedType String
  status      Boolean  @default(true)
  createdBy   String   @default("-")
  createdAt   DateTime @default(now())
  updatedBy   String?  @default("-")
  updatedAt   DateTime @updatedAt

  Apartment     Apartment?  @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  apartmentId   String?     @db.ObjectId
  Payment       Payment?    @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId     String?     @db.ObjectId
  Ad            Ad?         @relation(fields: [adId], references: [id], onDelete: Cascade)
  adId          String?     @db.ObjectId
  content       FileContent @relation(fields: [fileContentId], references: [id], onDelete: Cascade)
  fileContentId String      @db.ObjectId
  Claim         Claim?      @relation(fields: [claimId], references: [id])
  claimId       String?     @db.ObjectId
}

model FileContent {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @db.Date
  key        String
  modifiedAt DateTime  @db.Date
  value      String
  AppFile    AppFile[]
}
