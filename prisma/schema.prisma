// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider      = "prisma-client-js"
//   binaryTargets = ["native", "darwin-arm64"]
//   output        = "../node_modules/.prisma/client"
// }
generator client {
  provider                      = "prisma-client-js"
  interactiveTransactionTimeout = 10000 // Increase to 10 seconds
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// *** Building ***
model Building {
  id                        Int         @id @default(autoincrement())
  name                      String      @unique
  apartmentsCount           Int         @default(0)
  storeCount                Int         @default(0)
  basinName                 String
  basinNumber               String
  landNumber                String
  electricBill              String?     @default("-")
  serviceAmount             Float       @default(0.0)
  maintenanceAmount         Float       @default(0.0)
  registeredApartmentsCount Int         @default(0)
  apartments                Apartment[]
  status                    Boolean     @default(true)
  createdBy                 String?     @default("-")
  createdAt                 DateTime    @default(now())
  updatedBy                 String?     @default("-")
  updatedAt                 DateTime    @updatedAt
}

// *** Rent ***
// model Rent {
//   id                Int       @id @default(autoincrement())
//   renterName        String
//   renterNumber      String    @default("###")
//   rentDuration      String
//   rentAmount        Float     @default(0.0)
//   rentDate          DateTime  @default(now())
//   rentPaymentWays   String?
//   isFurniture       Boolean   @default(false)
//   rentStatus        Int       @default(3)
//   contractFileName  String
//   clearanceFileName String?
//   apartment         Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
//   apartmentId       Int
//   status            Boolean   @default(true)
//   createdBy         String?
//   createdAt         DateTime  @default(now())
//   updatedBy         String?
//   updatedAt         DateTime  @updatedAt
// }

// *** Apartment ***
model Apartment {
  id                   Int       @id @default(autoincrement())
  buildingName         String
  building             Building  @relation(fields: [buildingName], references: [name], onDelete: Cascade)
  apartmentNumber      String
  ownerName            String
  ownerNumber          String?
  agentName            String
  agentNumber          String?
  realLocation         String?
  electricSub          String?
  waterSub             String?
  renterName           String
  renterNumber         String    @default("###")
  rentDuration         String
  rentAmount           Float     @default(0.0)
  rentDate             DateTime  @default(now())
  rentPaymentWay       String?
  isFurniture          Boolean   @default(false)
  rentStatus           Int       @default(3)
  renterNationality    String?
  renterIdentification String?
  isServiceIncluded    Boolean   @default(false)
  insurance            Int       @default(0)
  commissionAmount     Int       @default(0)
  status               Boolean   @default(true)
  createdBy            String?
  createdAt            DateTime  @default(now())
  updatedBy            String?
  updatedAt            DateTime  @updatedAt
  payments             Payment[]
  claims               Claim[]
}

// *** Payments ***
model Payment {
  id                  Int       @id @default(autoincrement())
  apartment           Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  nextRentDate        DateTime
  receivedPaymentDate DateTime
  depositAmount       Int
  depositDate         DateTime
  notes               String?
  status              Boolean   @default(true)
  createdBy           String?
  createdAt           DateTime  @default(now())
  updatedBy           String?
  updatedAt           DateTime  @updatedAt
  apartmentId         Int
}

// *** Ads ***
model Ad {
  id                    Int                @id @default(autoincrement())
  code                  String             @unique
  propertyStatus        String
  propertyType          Int
  propertyOwnerName     String
  propertyOwnerNumber   String             @default("###")
  propertyOwnerIdentity String
  propertyAgentName     String?
  propertyAgentNumber   String             @default("###")
  propertyAgentIdentity String
  facebookLink          String?
  instagramLink         String?
  propertyLink          String?
  governorate           String
  directorate           String
  village               String
  basin                 String
  plot                  String
  apartmentNumber       String?
  classification        String?
  neighborhood          String?
  expectedRentAmount    String?
  notes                 String?
  interestedPeople      InterestedPeople[]
  status                Boolean            @default(true)
  createdBy             String?
  createdAt             DateTime           @default(now())
  updatedBy             String?
  updatedAt             DateTime           @updatedAt
}

// *** InterestedPeople ***
model InterestedPeople {
  id     Int    @id @default(autoincrement())
  name   String
  number String @default("###")

  ad   Ad  @relation(fields: [adId], references: [id], onDelete: Cascade)
  adId Int
}

// *** Orders ***
model Order {
  id          Int      @id @default(autoincrement())
  type        Int
  date        DateTime
  ownerName   String
  ownerNumber String
  details     String
  price       Float    @default(0.0)
  firstStep   String?
  notes       String?
  status      Boolean  @default(true)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedBy   String?
  updatedAt   DateTime @updatedAt
}

// *** Claims ***
model Claim {
  id          Int          @id @default(autoincrement())
  claimDate   DateTime     @default(now())
  claimFrom   String
  collections Collection[]
  details     Detail[]
  total       Float        @default(0.0)
  status      Boolean      @default(true)
  createdBy   String?
  createdAt   DateTime     @default(now())
  updatedBy   String?
  updatedAt   DateTime     @updatedAt
  apartment   Apartment    @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  apartmentId Int
}

model Collection {
  id       Int      @id @default(autoincrement())
  dateTime DateTime @default(now())
  payment  Float    @default(0.0)
  notes    String?

  claim   Claim @relation(fields: [claimId], references: [id], onDelete: Cascade)
  claimId Int
}

model Detail {
  id    Int    @id @default(autoincrement())
  item  String
  price Float  @default(0.0)

  claim   Claim @relation(fields: [claimId], references: [id], onDelete: Cascade)
  claimId Int
}
